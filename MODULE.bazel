# iOS
bazel_dep(name = "rules_xcodeproj", version = "2.1.0")
bazel_dep(
    name = "apple_support",
    version = "1.15.1",
    repo_name = "build_bazel_apple_support",
)
bazel_dep(
    name = "rules_swift",
    version = "1.18.0",
    repo_name = "build_bazel_rules_swift",
)
bazel_dep(
    name = "rules_apple",
    version = "3.5.1",
    repo_name = "build_bazel_rules_apple",
)

bazel_dep(
    name = "buildifier_prebuilt",
    version = "6.4.0",
    dev_dependency = True,
)

bazel_dep(name = "swiftlint", version = "0.54.0", repo_name = "SwiftLint")
bazel_dep(name = "aspect_rules_lint", version = "0.19.0")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "swiftformat",
    build_file_content = "filegroup(name = \"swiftformat\", srcs=[\"swiftformat_linux\"], visibility=[\"//visibility:public\"])",
    patch_cmds = ["chmod u+x swiftformat_linux"],
    sha256 = "f62813980c2848cb1941f1456a2a06251c2e2323183623760922058b98c70745",
    url = "https://github.com/nicklockwood/SwiftFormat/releases/download/0.49.17/swiftformat_linux.zip",
)

http_archive(
    name = "swiftformat_mac",
    build_file_content = "filegroup(name = \"swiftformat_mac\", srcs=[\"swiftformat\"], visibility=[\"//visibility:public\"])",
    patch_cmds = [
        # On MacOS, `xattr -c` clears the "Unknown developer" warning when executing a fetched binary
        "if command -v xattr > /dev/null; then xattr -c swiftformat; fi",
        "chmod u+x swiftformat",
        "mv swiftformat swiftformat_orig",
        "echo \"$PWD/swiftformat_orig --config tools/.swiftlint \"'\"$@\"'\"\" >> swiftformat",
        "chmod u+x swiftformat",
    ],
    sha256 = "978eaffdc3716bbc0859aecee0d83875cf3ab8d8725779448f0035309d9ad9f3",
    url = "https://github.com/nicklockwood/SwiftFormat/releases/download/0.49.17/swiftformat.zip",
)

# JS
bazel_dep(name = "rules_nodejs", version = "6.1.0")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = "20.11.1")

bazel_dep(name = "aspect_rules_js", version = "1.41.2")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "code-tools-npm",
    npmrc = "//code-tools:.npmrc",
    pnpm_lock = "//code-tools:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "code-tools-npm")

bazel_dep(name = "aspect_rules_ts", version = "2.3.0")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext", dev_dependency = True)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")

# Rust

bazel_dep(name = "rules_rust", version = "0.44.0")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(edition = "2021")
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

# crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
# # crate.spec(
# #     package = "tree-sitter",
# #     version = "0.21.0",
# # )
# """
# Fork due to:
# https://github.com/tree-sitter/tree-sitter/issues/3353
# https://github.com/tree-sitter/tree-sitter/pull/3352
# """
# crate.spec(
#     package = "tree-sitter",
#     git = "https://github.com/ayroblu/tree-sitter.git",
#     branch = "v0.21.0-bazel"
# )
# crate.spec(
#     package = "tree-sitter-scala",
#     version = "0.21.0",
# )
# crate.from_specs(name = "rust-code-crates")
# use_repo(crate, "crates")

# Prefer this method with Cargo overhead for cargo patch overrides
crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
)
crate.from_cargo(
    name = "rust-code-crates",
    cargo_lockfile = "//rust-code:Cargo.lock",
    manifests = ["//rust-code:Cargo.toml"],
)
use_repo(crate, "rust-code-crates")
