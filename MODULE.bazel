# iOS
bazel_dep(name = "rules_xcodeproj", version = "2.9.2")
bazel_dep(
    name = "apple_support",
    version = "1.15.1",
    repo_name = "build_bazel_apple_support",
)
bazel_dep(
    name = "rules_swift",
    version = "1.18.0",
    repo_name = "build_bazel_rules_swift",
)
bazel_dep(
    name = "rules_apple",
    version = "3.5.1",
    repo_name = "build_bazel_rules_apple",
)

bazel_dep(
    name = "buildifier_prebuilt",
    version = "6.4.0",
    dev_dependency = True,
)

bazel_dep(name = "swiftlint", version = "0.54.0", repo_name = "SwiftLint")
bazel_dep(name = "aspect_rules_lint", version = "0.19.0")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "swiftformat",
    build_file_content = "filegroup(name = \"swiftformat\", srcs=[\"swiftformat_linux\"], visibility=[\"//visibility:public\"])",
    patch_cmds = ["chmod u+x swiftformat_linux"],
    sha256 = "f62813980c2848cb1941f1456a2a06251c2e2323183623760922058b98c70745",
    url = "https://github.com/nicklockwood/SwiftFormat/releases/download/0.49.17/swiftformat_linux.zip",
)

http_archive(
    name = "swiftformat_mac",
    build_file_content = "filegroup(name = \"swiftformat_mac\", srcs=[\"swiftformat\"], visibility=[\"//visibility:public\"])",
    patch_cmds = [
        # On MacOS, `xattr -c` clears the "Unknown developer" warning when executing a fetched binary
        "if command -v xattr > /dev/null; then xattr -c swiftformat; fi",
        "chmod u+x swiftformat",
        "mv swiftformat swiftformat_orig",
        "echo \"$PWD/swiftformat_orig --config tools/.swiftlint \"'\"$@\"'\"\" >> swiftformat",
        "chmod u+x swiftformat",
    ],
    sha256 = "978eaffdc3716bbc0859aecee0d83875cf3ab8d8725779448f0035309d9ad9f3",
    url = "https://github.com/nicklockwood/SwiftFormat/releases/download/0.49.17/swiftformat.zip",
)

# Android
bazel_dep(name = "rules_jvm_external", version = "6.6")

_COMPOSE_VERSION = "1.4.3"
_KOTLIN_COMPILER_VERSION = "2.0.0"
# _KOTLIN_COMPILER_SHA = "ef578730976154fd2c5968d75af8c2703b3de84a78dffe913f670326e149da3b"

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        "org.jetbrains.kotlin:kotlin-compose-compiler-plugin-embeddable:{}".format(_KOTLIN_COMPILER_VERSION),
        "org.jetbrains.kotlin:kotlin-stdlib:{}".format(_KOTLIN_COMPILER_VERSION),
        "androidx.core:core-ktx:1.15.0",
        "androidx.appcompat:appcompat:1.7.0",
        "androidx.compose.material:material:{}".format(_COMPOSE_VERSION),
        "androidx.compose.ui:ui:{}".format(_COMPOSE_VERSION),
        "androidx.compose.ui:ui-tooling:{}".format(_COMPOSE_VERSION),
        "androidx.compose.runtime:runtime:{}".format(_COMPOSE_VERSION),
        # "androidx.compose.material3:material3:1.0.1",

        # Just resolutions
        "androidx.emoji2:emoji2-views-helper:1.3.0",
        "androidx.lifecycle:lifecycle-process:2.6.2",
        "androidx.lifecycle:lifecycle-runtime-ktx:2.6.2",
    ],
    repositories = [
        "https://maven.google.com",
        "https://repo1.maven.org/maven2",
    ],
)
use_repo(maven, "maven")

bazel_dep(name = "rules_kotlin", version = "2.0.0")

# JS
bazel_dep(name = "rules_nodejs", version = "6.1.0")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = "20.11.1")

bazel_dep(name = "aspect_rules_js", version = "1.41.2")

# Just so that you have access to pnpm for locking
pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm", dev_dependency = True)
use_repo(pnpm, "pnpm")

code_tools_npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
code_tools_npm.npm_translate_lock(
    name = "code-tools-npm",
    npmrc = "//code-tools:.npmrc",
    pnpm_lock = "//code-tools:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(code_tools_npm, "code-tools-npm")

js_lib_npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
js_lib_npm.npm_translate_lock(
    name = "js-lib-npm",
    npmrc = "//js-lib:.npmrc",
    pnpm_lock = "//js-lib:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(js_lib_npm, "js-lib-npm")

js_site_npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
js_site_npm.npm_translate_lock(
    name = "js-site-npm",
    npmrc = "//js-site:.npmrc",
    pnpm_lock = "//js-site:pnpm-lock.yaml",
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(js_site_npm, "js-site-npm")

bazel_dep(name = "aspect_rules_ts", version = "2.3.0")
bazel_dep(name = "aspect_rules_swc", version = "1.2.2")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext", dev_dependency = True)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")

# Rust

bazel_dep(name = "rules_rust", version = "0.54.1")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(edition = "2021")
use_repo(rust, "rust_toolchains")

register_toolchains("@rust_toolchains//:all")

crate = use_extension("@rules_rust//crate_universe:extension.bzl", "crate")
crate.spec(
    package = "tree-sitter",
    version = "0.23.2",
)
crate.spec(
    package = "tree-sitter-scala",
    version = "0.23.3",
)
crate.spec(
    package = "tree-sitter-python",
    version = "0.23.4",
)
crate.spec(
    package = "tree-sitter-typescript",
    version = "0.23.2",
)
crate.spec(
    package = "tree-sitter-javascript",
    version = "0.23.1",
)
crate.spec(
    package = "tree-sitter-rust",
    version = "0.23.2",
)
crate.spec(
    package = "png",
    version = "0.17.13",
)
crate.spec(
    package = "const_format",
    version = "0.2.33",
)
crate.spec(
    package = "serde_json",
    version = "1.0.133",
)
crate.spec(
    features = ["derive"],
    package = "serde",
    version = "1.0.215",
)
crate.spec(
    package = "assert_cmd",
    version = "2.0.16",
)
crate.from_specs()
use_repo(crate, "crates")

# Use Cargo overhead for cargo patch overrides
# crate = use_extension(
#     "@rules_rust//crate_universe:extension.bzl",
#     "crate",
# )
# crate.from_cargo(
#     name = "rust-code-crates",
#     cargo_lockfile = "//rust-code:Cargo.lock",
#     manifests = ["//rust-code:Cargo.toml"],
# )
# use_repo(crate, "rust-code-crates")

# Python

bazel_dep(name = "aspect_rules_py", version = "0.7.3")
bazel_dep(name = "rules_python", version = "0.31.0")

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    # Only set when you have mulitple toolchain versions.
    # is_default = True,
    python_version = "3.12",
)
use_repo(python, "python_versions")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    # envsubst = ["PIP_INDEX_URL"],
    hub_name = "pip",
    python_version = "3.12",
    requirements_lock = "//python_code:requirements.txt",
)
use_repo(pip, "pip")
